# Интегралы.

# Программе на вход подаются количество участков разбиения, нижний и 
# верхний пределы интегрирования, а затем подсчитывается интеграл с
# заданной точностью (если нужно) по методам трапеции и Буля.

# Интеграл: ln(x+sqrt(x**2+4))
# Первообразная: -sqrt(x**2+4)+x*ln(x+sqrt(x**2+4))

# Переменные:
#           n1,n2  - Количество участков разбиения для подсчёта;
#             n    - Количество разбиений для приближённого значения;
#            a,b   - Начальное и конечное значение (соответственно);
#             h    - Шаг изменения x в методах подсчёта;
#            eps   - Точность eps;
#            Im1   - Метод трапеции для n1;
#            Im2   - Метод трапеции для n2;
#            Ib1   - Метод Буля для n1;
#            Ib2   - Метод Буля для n2;
#            Ipr   - Приближённое значение интеграла;
#          Intprec - Точное значение интеграла;
#           Erabs  - Абсолютная погрешность;
#           Erotn  - Относительная погрешность;

from math import *

a=float(input('Введите нижний предел интегрирования: '))
b=float(input('Введите верхний предел интегрирования: '))
n1,n2=map(int,input('Введите количество участков разбиения через пробел: ')
          .split())

# Первообразная:
def F(x):
    #intg=-sqrt(x**2+4)+x*log(x+sqrt(x**2+4))
    intg=(x**3)/3
    return intg

# Интеграл:
def f(x):
    #intg=log(x+sqrt(x**2+4))
    intg=x*x
    return intg
    
# Метод трапеции:
def Trap(a,b,n):
    I=(f(a) + f(b))/2
    x=a
    h=(b-a)/n
    while x<=b:
        I+=f(x)
        x+=h
    I*=h
    return I

# Метод Буля:
def Bool(a,b,n):
    I=0
    x=a
    h=(b-a)/n
    for j in range(1,n//4+1):
        while x<=b:
            I += 7*f(x)+32*f(x+h)+12*f(x+2*h)+32*f(x+3*h)+7*f(x+4*h)
            x+=4*h
    I*=2*h/45
    return I

if a>=b:
    print('Введены неправильные пределы интегрирования.')
elif 0<=n1<=1 or 0<=n2<=1:
    print('Количество разбиений должно быть больше одного.')
else:
    eps=float(input('Введите точность eps: '))
    print('=============================================================')
    print('\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::')
    print('Интеграл: ln(x+sqrt(x**2+4))')
    print('Первообразная: -sqrt(x**2+4)+x*ln(x+sqrt(x**2+4))')
    print(':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::')
    
    Intprec=F(b)-F(a)
    
    Im1=Trap(a,b,n1)
    Im2=Trap(a,b,n2)

    Ib1=Bool(a,b,n1)
    Ib2=Bool(a,b,n2)
    
    print('┌─────────────────┬─────────────────────┬───────────────────┐')
    print('│      Метод      │       n1:{:3d}        │      n2:{:3d}       │'
          .format(n1,n2))
    print('├─────────────────┼─────────────────────┼───────────────────┤')
    print('│  Метод трапеций │   {:12.5f}      │   {:12.5f}    │'
          .format(Im1,Im2))
    print('├─────────────────┼─────────────────────┼───────────────────┤')
    print('│  Метод Буля     │   {:12.5f}      │   {:12.5f}    │'
          .format(Ib1,Ib2))
    print('└─────────────────┴─────────────────────┴───────────────────┘')
    
    n=int(2)
    Ipr=Trap(a,b,n*2)
    while abs(Ipr - Trap(a,b,n)) > eps:
        Ipr=Trap(a,b,n*2)
        n+=1     

    Erabs=abs(Intprec-Ipr)
    Erotn=abs((Intprec-Ipr)/Intprec)

    print('/////////////////////////////////////////////////////////////')
    print('Абсолютно точное значение интеграла: {:6.6f}'.format(Intprec))
    print('Приближённое значение интеграла: {:6.6f}'.format(Ipr))
    print('Количество разбиений для приближённого значения: {}'
          .format(2*n))
    print('Абсолютная погрешность: {:6.6f}'.format(Erabs))
    if Intprec==0:                                              # Проверка 
        print('Относительная погрешность не определена.')       # относительной
    else:                                                       # ошибки
        print('Относительная погрешность: {:6.6f}'.format(Erotn))
    print('/////////////////////////////////////////////////////////////')
input('\nНажмите Enter для завершения.')
